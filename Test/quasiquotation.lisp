(cl:in-package #:concrete-syntax-tree-test)

(defun test-quasiquotation ()
  (let* ((cst1 (cst:cst-from-expression 'a))
         (cst2 (cst:cst-from-expression '(b c)))
         (source (gensym))
         (qq (cst:quasiquote source
               (d (cst:unquote cst1) (cst:unquote-splicing cst2)
                  (cst:unquote cst2) (e (f f) . g)
                  (cst:unquote-splicing (cl:list cst1 cst1))
                  ((cst:unquote cst1) . (cst:unquote cst1))))))
    (assert (equal (cst:raw qq) '(d a b c (b c) (e (f f) . g) a a (a . a))))
    (assert (eq (cst:source qq) source))
    (assert (eq (cst:second qq) cst1))
    (assert (eq (cst:fifth qq) cst2))
    (assert (eq (cst:first (cst:ninth qq)) cst1))
    (assert (eq (cst:rest (cst:ninth qq)) cst1))))
